[
["index.html", "Methods Comparison Chapter 1 Introduction 1.1 Packages installation and loading 1.2 Simulations 1.3 Example datasets", " Methods Comparison Malu Calle Rosingana Coding: Yiwen Wang 2019-05-14 Chapter 1 Introduction This vignette provides a comparison of the 12 variables selected by the 3 methods: logistic_lasso + linear constraints; centered logratio transformation (CLR) + logistic_lasso; selbal. First, you will need to install then load the following packages: 1.1 Packages installation and loading #cran.packages &lt;- c(&#39;knitr&#39;, &#39;MASS&#39;, &#39;VennDiagram&#39;, &#39;gplots&#39;, &#39;glmnet&#39;) #install.packages(cran.packages) #devtools::install_github(repo = &quot;UVic-omics/selbal&quot;) library(knitr) # rbookdown library(MASS) # ginv library(VennDiagram) # venn.diagram library(gplots) # venn library(glmnet) # glmnet library(selbal) # selbal # build in functions source(file = &#39;functions.R&#39;) 1.2 Simulations The way we simulate datasets. 1.3 Example datasets We have two case studies. 1.3.1 Microbiome and Crohn’s disease Crohn’s disease (CD) is an inflammatory bowel disease that has been linked to microbial alterations in the gut (Gevers et al. 2014; Øyri, Műzes, and Sipos 2015). We use data from a large pediatric CD cohort study (Gevers et al. 2014) to compare the proposed methodologies for identification of microbial signatures. Microbiome data from 16S rRNA gene sequencing and QIIME 1.7.0 bioinformatics processing were downloaded from Qiita (Rivera-Pinto et al. 2018). Only patients with Crohn’s disease (n = 662) and those without any symptoms (n = 313) were analyzed. The OTU table was agglomerated to the genus level, resulting in a matrix with 48 genera and 975 samples. We load the data that are provided in advance. load(&quot;./datasets/Crohn_data.rda&quot;) # dim(x_Crohn) # summary(y_Crohn) CD data summary No. of genera 48 No. of samples 975 No. of patients with CD 662 No. of healthy patients 313 1.3.2 BEME day1 data content need to be added. References "],
["coda.html", "Chapter 2 CODA_LOGISTIC_LASSO 2.1 CD data 2.2 BEME day1 data", " Chapter 2 CODA_LOGISTIC_LASSO First, we illustrate the method lasso with linear constraints. 2.1 CD data x &lt;- x_Crohn x is the matrix of microbiome abundances, either absolute abundances (counts) or relative abundances (proportions). However, x should not be the matrix of log(counts) or log(proportions). The method itself performs the log-transformation of the abundances. y &lt;- y_Crohn summary(y) ## CD no ## 662 313 In the CD data, y is the binary outcome, can be numerical (values 0 and 1), factor (2 levels) or categorical (2 categories). dim(x) ## [1] 975 48 The rows of x are individuals/samples, the columns are taxa. To run the method, we need a value of \\(\\lambda\\). rangLambda(y, x,numVar = 12, lambdaIni = 0.15) ## [1] 0.00 0.65 48.00 17.00 ## [1] 0.000 0.325 48.000 2.000 ## [1] 0.1625 0.3250 12.0000 2.0000 ## $`rang lambdas` ## [1] 0.1625 0.3250 ## ## $`num selected variables` ## [1] 12 2 It provides a rang of \\(\\lambda\\) values corresponding to a given number of variables to be selected (numVar). The default initial \\(\\lambda\\) is lambdaIni=1. results_codalasso &lt;- coda_logistic_lasso(y, x, lambda = 0.19) \\(\\lambda\\) is the penalization parameter: the larger the value of \\(\\lambda\\), the fewer number of variables will be selected. results_codalasso ## $`number of iterations` ## [1] 23 ## ## $`number of selected taxa` ## [1] 11 ## ## $`indices of taxa with non-zero coeff` ## [1] 0 2 5 9 19 27 31 32 33 39 40 48 ## ## $`taxa with non-zero coeff` ## [1] &quot;beta0&quot; &quot;g__Parabacteroides&quot; ## [3] &quot;f__Peptostreptococcaceae_g__&quot; &quot;g__Eggerthella&quot; ## [5] &quot;g__Dialister&quot; &quot;o__Lactobacillales_g__&quot; ## [7] &quot;g__Prevotella&quot; &quot;g__Roseburia&quot; ## [9] &quot;g__Lachnospira&quot; &quot;g__Streptococcus&quot; ## [11] &quot;g__Aggregatibacter&quot; &quot;g__Bilophila&quot; ## ## $`beta non-zero coefficients` ## [1] -1.0023255478 -0.0057464016 0.0202907034 -0.0184875313 -0.0992393846 ## [6] -0.0159418386 -0.0030842274 0.2530005235 -0.0085670215 -0.0818265310 ## [11] -0.0406982632 0.0002999724 ## ## $`proportion of explained deviance` ## [1] 0.1542276 ## ## $betas ## [1] -1.0023255478 0.0000000000 -0.0057464016 0.0000000000 0.0000000000 ## [6] 0.0202907034 0.0000000000 0.0000000000 0.0000000000 -0.0184875313 ## [11] 0.0000000000 0.0000000000 0.0000000000 0.0000000000 0.0000000000 ## [16] 0.0000000000 0.0000000000 0.0000000000 0.0000000000 -0.0992393846 ## [21] 0.0000000000 0.0000000000 0.0000000000 0.0000000000 0.0000000000 ## [26] 0.0000000000 0.0000000000 -0.0159418386 0.0000000000 0.0000000000 ## [31] 0.0000000000 -0.0030842274 0.2530005235 -0.0085670215 0.0000000000 ## [36] 0.0000000000 0.0000000000 0.0000000000 0.0000000000 -0.0818265310 ## [41] -0.0406982632 0.0000000000 0.0000000000 0.0000000000 0.0000000000 ## [46] 0.0000000000 0.0000000000 0.0000000000 0.0002999724 selected_codalasso &lt;- results_codalasso[[4]][-1] columns_selected_codalasso &lt;- results_codalasso[[3]][-1] write.csv(data.frame(columns_selected_codalasso,selected_codalasso), &quot;./Generated_datasets/results_codalasso_Crohn12.csv&quot;) We extract the name of selected genera and their column indices and then save them in a csv file. 2.2 BEME day1 data content need to be added. "],
["clr.html", "Chapter 3 CLR_LOGISTIC_LASSO 3.1 CD data 3.2 BEME day1 data", " Chapter 3 CLR_LOGISTIC_LASSO Then, we illustrate a combined method with centered logratio transformation (CLR) and lasso. 3.1 CD data x &lt;- as.matrix(x_Crohn) y &lt;- y_Crohn_numeric Here, y is numeric, because glmnet() requires y to be numeric. # CLR transformation Z=log(x) z &lt;- log(x) clrx &lt;- apply(z, 2, function(x) x-rowMeans(z)) # rowMeans(clrx) x (the matrix of microbiome abundances) is then CLR transformed. clrlasso &lt;- glmnet(clrx, y, standardize = FALSE, alpha = 1,family = &quot;binomial&quot;, lambda = seq(0.015, 2, 0.01)) plot(clrlasso) #print(clrlasso) clrlasso_coef &lt;- coef(clrlasso, s = 0.10) sum(abs(clrlasso_coef) &gt; 0) ## [1] 13 selected_clrlasso &lt;- which(as.numeric(abs(coef(clrlasso, s = 0.1))) &gt; 0)[-1]; We obtain the indices of selected variables (abs(coef) &gt; 0) from lasso. selected_clrlasso &lt;- selected_clrlasso - 1 taxa_id &lt;- colnames(x_Crohn)[selected_clrlasso] write.csv(data.frame(selected_clrlasso, taxa_id), &quot;./Generated_datasets/results_clrlasso_Crohn12.csv&quot;) The name of selected genera and their indices are also saved in a csv file. 3.2 BEME day1 data content need to be added. "],
["selbal.html", "Chapter 4 Selbal: selection of balances 4.1 CD data 4.2 BEME day1 data", " Chapter 4 Selbal: selection of balances The last method to illustrate is selbal, see details in (Rivera-Pinto et al. 2018). 4.1 CD data x &lt;- x_Crohn colnames(x) &lt;- (1:ncol(x)) y &lt;- y_Crohn For binary outcomes (logistic regression), selbal() requires y to be factor. If y is numeric, selbal() implements linear regression. selbal_Crohn &lt;- selbal(x = x, y = y, logt=T, maxV=12) ## ## Attaching package: &#39;gridExtra&#39; ## The following object is masked from &#39;package:Biobase&#39;: ## ## combine ## The following object is masked from &#39;package:BiocGenerics&#39;: ## ## combine Figure 4.1: Description of the global balance for CD. We use Area Under the receiver operating characteristic Curve (AUC) to deciede what is the optimal number of variables. Once the first two-taxon balance is selected, the algorithm performs a forward selection process. At each step, a new taxon is added to the existing balance such that AUC is improved, the algorithm stops when there is no additional variable that increase the current AUC or when the maximun number of variables to be included in the balance is achieved. In Figure , the two groups of taxa that form the global balance are specified at the top of the plot. The box plot represents the distribution of the balance scores for CD and non-CD individuals. The right part of the figure contains the ROC curve with its AUC value and the density curve for each group. selected_selbal &lt;- as.numeric(c(selbal_Crohn[[6]][,1], selbal_Crohn[[6]][,2])) id.na &lt;- which(is.na(selected_selbal)) selected_selbal &lt;- selected_selbal[-id.na] selected_selbal &lt;- as.character(selected_selbal) columns_selected_selbal &lt;- which(colnames(x)%in% selected_selbal) taxa_id &lt;- colnames(x_Crohn)[columns_selected_selbal] write.csv(data.frame(columns_selected_selbal, taxa_id), &quot;./Generated_datasets/results_selbal_Crohn12.csv&quot;) The name of selected genera and their indices are also saved as the other method did. 4.2 BEME day1 data content need to be added. References "],
["comparison.html", "Chapter 5 Concordance of variables selected by the three methods 5.1 CD data 5.2 BEME day1 data", " Chapter 5 Concordance of variables selected by the three methods 5.1 CD data d_selbal &lt;- read.csv(&quot;./Generated_datasets/results_selbal_Crohn12.csv&quot;, header = T) d_clrlasso &lt;- read.csv(&quot;./Generated_datasets/results_clrlasso_Crohn12.csv&quot;, header = T) d_codalasso &lt;- read.csv(&quot;./Generated_datasets/results_codalasso_Crohn12.csv&quot;, header = T) taxa_selected &lt;- list(d_clrlasso[,2], d_codalasso[,2], d_selbal[,2]) taxa.id_selected &lt;- list(d_clrlasso[,3], d_codalasso[,3], d_selbal[,3]) venn.plot &lt;- venn.diagram(taxa_selected, NULL, fill = c(&quot;magenta&quot;, &quot;blue&quot;, &quot;lightblue&quot;), alpha=c(0.5,0.5,0.5), cex = 2, cat.fontface=4, category.names = c(&quot;clr+lasso&quot;, &quot;coda-lasso&quot;, &quot;selbal&quot;), main = &quot;Concordance of selected taxa for Crohn data&quot;) grid.draw(venn.plot) taxa.id &lt;- venn(taxa.id_selected, show.plot=FALSE) taxa &lt;- venn(taxa_selected, show.plot=FALSE) inters_taxa.id &lt;- attr(taxa.id, &quot;intersections&quot;) inters_taxa &lt;- attr(taxa, &quot;intersections&quot;) lapply(inters_taxa, head) ## $A ## [1] &quot;10&quot; ## ## $B ## [1] &quot;27&quot; ## ## $C ## [1] &quot;15&quot; &quot;18&quot; &quot;26&quot; &quot;28&quot; &quot;34&quot; ## ## $`A:B` ## [1] &quot;2&quot; &quot;31&quot; &quot;33&quot; &quot;48&quot; ## ## $`A:C` ## [1] &quot;8&quot; ## ## $`A:B:C` ## [1] &quot;5&quot; &quot;9&quot; &quot;19&quot; &quot;32&quot; &quot;39&quot; &quot;40&quot; lapply(inters_taxa.id, head) ## $A ## [1] &quot;g__Faecalibacterium&quot; ## ## $B ## [1] &quot;o__Lactobacillales_g__&quot; ## ## $C ## [1] &quot;g__Blautia&quot; &quot;g__Dorea&quot; &quot;g__Oscillospira&quot; ## [4] &quot;g__Adlercreutzia&quot; &quot;o__Clostridiales_g__&quot; ## ## $`A:B` ## [1] &quot;g__Parabacteroides&quot; &quot;g__Prevotella&quot; &quot;g__Lachnospira&quot; ## [4] &quot;g__Bilophila&quot; ## ## $`A:C` ## [1] &quot;g__Bacteroides&quot; ## ## $`A:B:C` ## [1] &quot;f__Peptostreptococcaceae_g__&quot; &quot;g__Eggerthella&quot; ## [3] &quot;g__Dialister&quot; &quot;g__Roseburia&quot; ## [5] &quot;g__Streptococcus&quot; &quot;g__Aggregatibacter&quot; need more explanation of the venn diagram. 5.2 BEME day1 data content need to be added. "],
["references.html", "References", " References "]
]
